[{"C:\\xampp\\htdocs\\expense-tracker\\src\\index.js":"1","C:\\xampp\\htdocs\\expense-tracker\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\expense-tracker\\src\\App.js":"3","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\ExpenseList.js":"4","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Expense.js":"5","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Navbar\\Navbar.js":"6","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Navbar\\Popup.js":"7","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\InputForm.js":"8","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\SettingsModal.js":"9","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Localstorage.js":"10"},{"size":504,"mtime":1608406303606,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":3428,"mtime":1609384241129,"results":"14","hashOfConfig":"12"},{"size":773,"mtime":1609303044033,"results":"15","hashOfConfig":"12"},{"size":681,"mtime":1609275272623,"results":"16","hashOfConfig":"12"},{"size":422,"mtime":1609269915331,"results":"17","hashOfConfig":"12"},{"size":932,"mtime":1609384170501,"results":"18","hashOfConfig":"12"},{"size":3966,"mtime":1611615355356,"results":"19","hashOfConfig":"12"},{"size":2693,"mtime":1609382172289,"results":"20","hashOfConfig":"12"},{"size":1752,"mtime":1609384213440,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bxlmbd",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\xampp\\htdocs\\expense-tracker\\src\\index.js",[],["45","46"],"C:\\xampp\\htdocs\\expense-tracker\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\App.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\ExpenseList.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Expense.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Navbar\\Navbar.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Navbar\\Popup.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\InputForm.js",[],"C:\\xampp\\htdocs\\expense-tracker\\src\\components\\SettingsModal.js",["47","48"],"import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, ButtonGroup, ToggleButton } from \"react-bootstrap\";\r\n\r\nconst SettingsModal = ({ show, setShow, theme, setTheme, saveLocalStorage, setSaveLocalStorage }) => {\r\n    const themeValues = [\r\n        { name: \"Light Mode\", value: \"0\" },\r\n        { name: \"Dark Mode\", value: \"1\" },\r\n    ];\r\n    const storageValues = [\r\n        { name: \"Save Expenses\", value: \"0\" },\r\n        { name: \"No Save\", value: \"1\" },\r\n    ];\r\n\r\n    function themeChange(e) {\r\n        setTheme(e.currentTarget.value);\r\n    }\r\n\r\n    function storageChange(e) {\r\n        setSaveLocalStorage(e.currentTarget.value);\r\n    }\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    return (\r\n        <Modal show={show}>\r\n            <Modal.Header>\r\n                <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ButtonGroup>\r\n                    {themeValues.map((themeValue, idx1) => (\r\n                        <ToggleButton\r\n                            className=\"radiobuttons\"\r\n                            variant=\"link\"\r\n                            key={idx1}\r\n                            type=\"radio\"\r\n                            name=\"radio\"\r\n                            value={themeValue.value}\r\n                            checked={theme === themeValue.value}\r\n                            onChange={themeChange}\r\n                        >\r\n                            {themeValue.name}\r\n                        </ToggleButton>\r\n                    ))}\r\n                </ButtonGroup>\r\n                <div>\r\n                    <ButtonGroup>\r\n                        {storageValues.map((storageValue, idx2) => (\r\n                            <ToggleButton\r\n                                className=\"radiobuttons\"\r\n                                variant=\"link\"\r\n                                key={idx2}\r\n                                type=\"radio\"\r\n                                name=\"storage\"\r\n                                value={storageValue.value}\r\n                                checked={saveLocalStorage === storageValue.value}\r\n                                onChange={storageChange}\r\n                            >\r\n                                {storageValue.name}\r\n                            </ToggleButton>\r\n                        ))}\r\n                    </ButtonGroup>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SettingsModal;\r\n","C:\\xampp\\htdocs\\expense-tracker\\src\\components\\Localstorage.js",["49","50","51","52"],"import React, { useEffect } from \"react\";\r\n\r\nconst LocalStorage = (props) => {\r\n    useEffect(() => {\r\n        const savedStorageItems = JSON.parse(localStorage.getItem(\"expenses\")) || [];\r\n        const savedTheme = JSON.parse(localStorage.getItem(\"theme\"));\r\n        const save = JSON.parse(localStorage.getItem(\"save\"));\r\n\r\n        switch (save) {\r\n            //Do not save in local storage\r\n            case \"1\":\r\n                props.setSaveLocalStorage(\"1\");\r\n                break;\r\n            //Save in local storage\r\n            case \"0\":\r\n                props.setSaveLocalStorage(\"0\");\r\n                break;\r\n            default:\r\n        }\r\n\r\n        switch (savedTheme) {\r\n            //Dark Theme\r\n            case \"1\":\r\n                if (JSON.parse(localStorage.getItem(\"save\")) === \"0\") {\r\n                    props.setTheme(\"1\");\r\n                    break;\r\n                }\r\n            //Light Theme\r\n            case \"0\":\r\n                if (JSON.parse(localStorage.getItem(\"save\")) === \"0\") {\r\n                    props.setTheme(\"0\");\r\n                    break;\r\n                }\r\n            default:\r\n        }\r\n\r\n        if (savedStorageItems.length > 0) {\r\n            if (JSON.parse(localStorage.getItem(\"save\")) === \"0\") {\r\n                props.setExpenses(JSON.parse(localStorage.getItem(\"expenses\")));\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"theme\", JSON.stringify(props.theme));\r\n        localStorage.setItem(\"expenses\", JSON.stringify(props.expenses));\r\n        localStorage.setItem(\"save\", JSON.stringify(props.saveLocalStorage));\r\n    }, [props.expenses, props.saveLocalStorage, props.theme]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default LocalStorage;\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"61","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"62","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":29,"column":13,"nodeType":"65","messageId":"66","endLine":33,"endColumn":18},{"ruleId":"63","severity":1,"message":"67","line":34,"column":13,"nodeType":"65","messageId":"68","endLine":34,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":42,"column":8,"nodeType":"71","endLine":42,"endColumn":10,"suggestions":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'React' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [props]",{"range":"78","text":"79"},[1378,1380],"[props]"]